{
	// ====================================================
	// [ 1 ] ---- Import Statement ---- *TAKEN FROM PROJECT
	// ====================================================
	"Import Statement": {
		"prefix": "ts-import",
		"body": [
			"import ${1:Hero} from \"${2:@slice/Hero.astro}\";",
		],
		"description": "Import Statement"
	},
	// ===============================================
	// [ 2 ] ---- Console.log ---- 
	// ===============================================
	"console.log()": {
		"prefix": "ts-console",
		"body": [
			"console.log(\"${1:Hello world!}\");"
		],
		"description": "console.log()"
	},
	// =======================================================================
	// [ 3 ] ---- Consume API without key using fetch ---- *TAKEN FROM PROJECT 
	// =======================================================================
	"Consume api (without key) with fetch ": {
		"prefix": "ts-consume-api",
		"body": [
			"export default {",
			"  data() {",
			"    return {",
			"      items: []",
			"    };",
			"    console.log(items);",
			"  },",
			"  methods: {",
			"    fetchItems() {",
			"      fetch(\"${1:https://cms-buychain-pb01.up.railway.app/items/home/340b5764-07a3-4c59-9e56-b137275dba7d?access_token=2FfEVIDkZ9J0Iq_JycdfwQ_3UIQ-Ylga&fields=grab_a_slice.nosql_datastore_id.*}\")",
			"        .then((response) => response.json())",
			"        .then((data) => (this.items = data));",
			"      console.log(this);",
			"    }",
			"  },",
			"  mounted() {",
			"    this.fetchItems();",
			"  }",
			"};"
		],
		"description": "Consume api (without key) with fetch "
	},
	// ====================================================================
	// [ 4 ] ---- Consume API with key using fetch ---- *TAKEN FROM PROJECT 
	// ====================================================================
	"Consume API with key using fetch": {
		"prefix": "ts-consume-api-key",
		"body": [
			"export default {",
			"  data() {",
			"    return {",
			"      items: []",
			"    };",
			"  },",
			"  methods: {",
			"    fetchItems() {",
			"      const options = {",
			"        method: 'GET',",
			"        headers: {",
			"          'Authorization': 'Bearer ${1:xUu7uNUFtkVRl3uwpeMvZngHUvf1MOT4}',",
			"          'Host': '${2:https://3ytvvyi4.directus.app/}'",
			"        }",
			"      };",
			"",
			"      fetch('${3:https://3ytvvyi4.directus.app/items/articles/10?fields[]=translations.body}', options)",
			"        .then(response => response.json())",
			"        .then((data) => (this.items = data));",
			"      console.log(this);",
			"    }",
			"  },",
			"  mounted() {",
			"    this.fetchItems();",
			"  }",
			"};",
			"console.log(this);"
		],
		"description": "Consume API with key using fetch"
	},
	// ===============================================
	// [ 5 ] ---- Stringify JSON Object ---- 
	// ===============================================
	"Stringify JSON Object": {
		"prefix": "ts-stringify",
		"body": [
			"JSON.stringify(${1:items})"
		],
		"description": "Stringify"
	},
	// ===============================================
	// [ 6 ] ---- Parse JSON Object ---- 
	// ===============================================
	"Parse JSON Object": {
		"prefix": "ts-parse",
		"body": [
			"JSON.parse(${1:items})"
		],
		"description": "Parse JSON Object"
	},
	// ============================================================================
	// [ 7 ] ---- Directus import statement ---- *TAKEN FROM DIRECTUS DOCUMENTATION
	// ============================================================================
	"directus import statement": {
		"prefix": "ts-import-directus/sdk",
		"body": [
			"import { Directus } from '@directus/sdk';",
			"",
			"const directus = new Directus('http://directus.example.com');"
		],
		"description": "directus import statement"
	},
	// ==============================================================================
	// [ 8 ] ---- Directus Access Public Data ---- *TAKEN FROM DIRECTUS DOCUMENTATION
	// ==============================================================================
	"Directus Access Public Directus Data ": {
		"prefix": "ts-access-directus-data-public",
		"body": [
			"async function publicData() {",
			"//GET DATA",
			
			"// We don't need to authenticate if the public role has access to some_public_collection.",
			"const publicData = await directus.items('some_public_collection').readByQuery({ sort: ['id'] });",
			"",
			"console.log(publicData.data);",
			"}"
		],
		"description": "Directus Access Public Directus Data Using Await"
	},
	// ===================================================================================
	// [ 9 ] ---- Directus Access Data Using Axios ---- *TAKEN FROM DIRECTUS DOCUMENTATION
	// ===================================================================================
	"Directus Access Directus Data Using Await": {
		"prefix": "ts-consume-directus-data-await",
		"body": [
			"async function start() {",
			" // AUTHENTICATION",
			"",
			" let authenticated = false;",
			"",
			" // Try to authenticate with token if exists",
			" await directus.auth",
			"   .refresh()",
			"   .then(() => {",
			"      authenticated = true;",
			"    })",
			"   .catch(() => {});",
			"",
			" // Let's login in case we don't have token or it is invalid / expired",
			" while (!authenticated) {",
			"   const email = window.prompt('Email:');",
			"   const password = window.prompt('Password:');",
			"",
			"   await directus.auth",
			"     .login({ email, password })",
			"     .then(() => {",
			"       authenticated = true;",
			"      })",
			"     .catch(() => {",
			"       window.alert('Invalid credentials');",
			"      });",
			" }",
			"",
			" // GET DATA",
			"",
			" // After authentication, we can fetch data from any collections that the user has permissions to.",
			" const privateData = await directus.items('some_private_collection').readByQuery({ sort: ['id'] });",
			"",
			" console.log(privateData.data);",
			"}",
			"",
			"start();"
		],
		"description": "Directus Access Directus Data Using Await"
	},
	// ====================================================
	// [ 10 ] ---- Import a Module ---- *TAKEN FROM PROJECT
	// ====================================================
	"Import a Module": {
		"prefix": "ts-import-module",
		"body": [
			"import { ${1:getCollection} } from '${2:astro:content}';",
			""
		],
		"description": "Import a Module"
	}
}